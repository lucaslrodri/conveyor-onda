CCS PCH C Compiler, Version 4.130, 10828               17-ago-16 16:36

               Filename: C:\Users\lucas\Google Drive\Dropbox\Profissional\Estagio com aninha\Onda\Esteira Lucas e Rafael\Code\main.lst

               ROM used: 350 bytes (1%)
                         Largest free fragment is 31582
               RAM used: 26 (1%) at main() level
                         29 (1%) worst case
               Stack:    3 worst case (0 in main + 3 for interrupts)

*
0000:  GOTO   0138
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   0118
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... //Carrega a biblioteca para o microcontrolador 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
....................   
.................... //Configuracao FUSES 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPUT 
.................... #FUSES NOPROTECT 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOMCLR  //No Master Clear 
.................... #FUSES NOLVP 
.................... #FUSES NOCPD 
....................   
....................  
....................  
.................... //Define a utilização do clock interno de 16 Mhz 
.................... #use delay(clock=16000000) 
00C6:  CLRF   FEA
00C8:  MOVLW  1C
00CA:  MOVWF  FE9
00CC:  MOVF   FEF,W
00CE:  BZ    00EC
00D0:  MOVLW  05
00D2:  MOVWF  01
00D4:  CLRF   00
00D6:  DECFSZ 00,F
00D8:  BRA    00D6
00DA:  DECFSZ 01,F
00DC:  BRA    00D4
00DE:  MOVLW  2E
00E0:  MOVWF  00
00E2:  DECFSZ 00,F
00E4:  BRA    00E2
00E6:  BRA    00E8
00E8:  DECFSZ FEF,F
00EA:  BRA    00D0
00EC:  GOTO   0110 (RETURN)
....................  
.................... int const step[8] ={ 
.................... 	0b00001110, //1 
.................... 	0b00001100, //2 
.................... 	0b00001101, //3 
.................... 	0b00001001, //4 
.................... 	0b00001011, //5 
.................... 	0b00000011, //6 
.................... 	0b00000111, //7 
.................... 	0b00000110, //8 
.................... }; 
....................  
.................... int mover_esteira(int passo_atual){ 
.................... 	int proximo_passo; 
.................... 	proximo_passo = passo_atual; 
00F0:  MOVFF  1A,1B
.................... 	if(proximo_passo<8) 
00F4:  MOVF   1B,W
00F6:  SUBLW  07
00F8:  BNC   00FE
.................... 		proximo_passo++; 
00FA:  INCF   1B,F
.................... 	else 
00FC:  BRA    0100
.................... 		proximo_passo = 0; 
00FE:  CLRF   1B
.................... 	output_d(step[proximo_passo]); 
0100:  CLRF   03
0102:  MOVF   1B,W
0104:  RCALL  00AE
0106:  CLRF   F95
0108:  MOVWF  F8C
.................... 	delay_ms(1); 
010A:  MOVLW  01
010C:  MOVWF  1C
010E:  BRA    00C6
.................... 	return proximo_passo; 
0110:  MOVFF  1B,01
.................... } 
0114:  GOTO   011E (RETURN)
....................  
.................... #INT_RTCC 
.................... void eventoMoverEsteira(){ 
.................... 	static int passo = 0; 
.................... 	passo = mover_esteira(passo); 
0118:  MOVFF  19,1A
011C:  BRA    00F0
011E:  MOVFF  01,19
.................... 	set_timer0(get_timer0()+0); 
0122:  MOVF   FD6,W
0124:  MOVFF  FD7,03
0128:  MOVFF  FD7,1B
012C:  MOVFF  FD7,FD7
0130:  MOVWF  FD6
.................... } 
....................  
....................   
0132:  BCF    FF2.2
0134:  GOTO   0060
.................... void main(){ 
0138:  CLRF   FF8
013A:  BCF    FD0.7
013C:  BSF    07.7
013E:  CLRF   FEA
0140:  CLRF   FE9
0142:  CLRF   19
0144:  MOVF   FC1,W
0146:  ANDLW  C0
0148:  IORLW  0F
014A:  MOVWF  FC1
014C:  MOVLW  07
014E:  MOVWF  FB4
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_64); 
0150:  MOVLW  85
0152:  MOVWF  FD5
....................    set_timer0(0); 
0154:  CLRF   FD7
0156:  CLRF   FD6
....................    enable_interrupts(INT_RTCC); 
0158:  BSF    FF2.5
....................    enable_interrupts(GLOBAL); 
015A:  MOVLW  C0
015C:  IORWF  FF2,F
.................... while (TRUE); 
015E:  BRA    015E
.................... } 
0160:  BRA    0160

Configuration Fuses:
   Word  1: 4C3F   PLL12 CPUDIV4 USBDIV HS FCMEN NOIESO
   Word  2: 1A31   NOPUT NOBROWNOUT BORV27 VREGEN NOWDT WDT8192
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 0000   NOSTVREN NOLVP ICSP1 NOXINST DEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.
